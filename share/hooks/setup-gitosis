#!/usr/bin/env ruby

module Gitosis

	################################################################ # {{{
	# Finding gitosis.conf
	
	Dir = "#{ENV['HOME']}/devel/.gitosis-admin"
	File = "gitosis.conf"

	Path = "#{Dir}/#{File}"

	# }}}


	################################################################ # {{{
	# Finding what to edit in gitosis.conf

	Project = "projects"
	Prefix = "#{ENV['USER']}/projects"
	
	# }}}

	################################################################

	Url = "git@cerberus.hjdivad.com:#{Prefix}"
end


# Add entry +Gitosis::Prefix+/+name+ to gitosis.conf
def update_gitosis_conf!( name )
	config = File.readlines( Gitosis::Path )
	File.open( Gitosis::Path, 'w' ) do |f|
		# simple state machine: are we in [group project]?
		in_project_group = false

		config.each do |line|
			if line =~ /\[group #{Gitosis::Project}\]/
				in_project_group = true
			elsif line =~ /\[group .*\]/
				in_project_group = false
			end

			if in_project_group
				if line =~ /^(\s*writable\s*=.*)\n/
					line = "#{$1} #{Gitosis::Prefix}/#{name}"
				end
			end

			f.print line
		end
	end
end

def commit_push_gitosis!( name )
	system [
		"cd #{Gitosis::Dir}",
		"git commit --all -m 'Added project #{name}.'",
		"git push",
	].join( " && " )
end

def add_origin_to_repo!( name )
	if File.directory? name
		system [
			"cd #{name}",
			"git remote add origin #{Gitosis::Url}/#{name}",
			"git config branch.master.remote origin",
			"git config branch.master.merge refs/heads/master",
			"git push origin master",
		].join( " && " )
	end
end

def command!( args )

	name = args.first

	update_gitosis_conf!( name )
	commit_push_gitosis!( name )
	add_origin_to_repo!( name )
end


command!( ARGV ) if $0 == __FILE__

