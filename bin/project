#!/usr/bin/env ruby

require 'fileutils'


TemplatesRoot = "#{ENV['HOME']}/local/share/project/templates"
HooksRoot = "#{ENV['HOME']}/local/share/project/after"

AllFilesPattern = "{.,[a-zA-Z]}[a-zA-Z]*"


def print_usage
	puts "
		Usage: project <name> [<template>] [<hook-args>]

		Creates directory <name>, copied from
		$HOME/local/share/project/templates/<template>, if given, and
		initializes as a git repository with a single, empty, root commit. 

		Runs $HOME/local/share/project/after/<template>/*, if any, passing in
		<name> and <hook-args> as arguments.
	".strip.gsub( /^\s+/, '' )
end

def requirements_met?
	# TODO 2: check for git, maybe Templates/Hooks Root
	true
end


def command!( args )

	if args.empty?
		print_usage
		exit 1
	end
	exit 1  unless requirements_met?


	directory, template = *args

	template_full_path = "#{TemplatesRoot}/#{template}"

	if !template.nil? and !File.directory? template_full_path
		puts "No such template: #{template}: looking in #{TemplatesRoot}"
		exit 2
	end

	if File.exists? directory
		puts "#{directory} already exists!"
		exit 2
	end


	# create the directory, copying everything from the template, if it was
	# given
	FileUtils.mkdir_p( directory )
	FileUtils.cp_r(
		Dir["#{template_full_path}/#{AllFilesPattern}"],
		directory
	) unless template.nil?


	# initialize  git repository
	commands = [
		"cd #{directory}",
		"git init",
		"git commit --allow-empty -m 'Root.'",
	]
	commands << "git add . && git commit -m 'Copied template.' " unless template.nil?

	system commands.join( " && " )


	# run hooks
	hook_args = ([directory] + [ARGV[2..-1]].compact.flatten).join( " " )
	Dir["#{HooksRoot}/#{template}/#{AllFilesPattern}"].each do |hook|
		system hook, *hook_args
	end
end


command!( ARGV ) if $0 == __FILE__

